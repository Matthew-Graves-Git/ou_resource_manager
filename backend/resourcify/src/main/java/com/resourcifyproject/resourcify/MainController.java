package com.resourcifyproject.resourcify;

import com.fasterxml.jackson.databind.JsonNode;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import java.util.Objects;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Controller // This means that this class is a Controller
@CrossOrigin
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {

    private static final Logger log = LoggerFactory.getLogger(MainController.class); //TEMPORARY!!!!!!!!!!

    @Autowired // This means to get the bean called userRepository
               // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired

    private PasswordEncoder passwordEncoder;
    @CrossOrigin(origins = "http://localhost:3000")
    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestBody JsonNode payload)
    {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setRole(payload.get("role").textValue());
        n.setUsername(payload.get("username").textValue());
        n.setPassword(payload.get("password").textValue());
        n.setPassword(passwordEncoder.encode(n.getPassword()));
        n.setLastname(payload.get("lastname").textValue());
        n.setFirstname(payload.get("firstname").textValue());
        userRepository.save(n);
        return "Saved";
    }
    @CrossOrigin(origins = "http://localhost:3000")
    @GetMapping(path="/all")
    @PreAuthorize("hasAuthority('ROLE_ADMIN')")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
}