package com.resourcifyproject.resourcify;

import com.fasterxml.jackson.databind.JsonNode;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.*;

@Controller
@CrossOrigin
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    @Autowired
    private ResourceRepository resourcerepository;
    @Autowired
    private ItemRepository itemRepository;
    @Autowired
    private PasswordEncoder passwordEncoder;

    @CrossOrigin(origins = "http://localhost:3000")
    @PostMapping(path="/add")
    public @ResponseBody String addNewUser (@RequestBody JsonNode payload)
    {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        if (userRepository.findByUsername(payload.get("username").textValue()).isPresent()) {
            return "User already Exists";
        }
        User n = new User();
        n.setRole(payload.get("role").textValue());
        n.setUsername(payload.get("username").textValue());
        n.setPassword(payload.get("password").textValue());
        n.setPassword(passwordEncoder.encode(n.getPassword()));
        n.setLastname(payload.get("lastname").textValue());
        n.setFirstname(payload.get("firstname").textValue());
        userRepository.save(n);
        return "Saved";
    }

    @CrossOrigin(origins = "http://localhost:3000")
    @PostMapping(path="/add/funds")
    public @ResponseBody String addFunds (@RequestBody JsonNode payload) throws UsernameNotFoundException {
        User user = userRepository.findByUsername(payload.get("username").textValue()).get();
        user.setAvailableFunds( user.getAvailableFunds() + payload.get("funds").floatValue() );

        return "Added Funds";
    }

    @CrossOrigin(origins = "http://localhost:3000")
    @PostMapping(path="/add/resource")
    public @ResponseBody String addNewResource (@RequestBody JsonNode payload) {
        Resource r = new Resource();
        r.setResourceCategory(payload.get("resourceCategory").textValue());
        r.setName(payload.get("name").textValue());
        r.setDescription(payload.get("description").textValue());
        r.setImage(payload.get("image").textValue());
        r.setModelNumber(payload.get("modelNumber").textValue());
        r.setBorrowPrice(Float.parseFloat(payload.get("borrowPrice").textValue()));
        r.setSalePrice(Float.parseFloat(payload.get("salePrice").textValue()));
        resourcerepository.save(r);
        return "Added Resource";
    }

    @CrossOrigin(origins = "http://localhost:3000")
    @PostMapping(path="/add/item")
    public @ResponseBody String addNewItem (@RequestBody JsonNode payload) {
        Resource r = resourcerepository.findById(payload.get("resourceId").asInt()).get();
        Item i = new Item();
        i.setResource(r);
        i.setItemType(payload.get("itemType").textValue());
        i.setSerialNumber(payload.get("serialNumber").textValue());
        i.setAvailable(true);
        itemRepository.save(i);
        return "Added Item";
    }

    @CrossOrigin(origins = "http://localhost:3000")
    @GetMapping(path="/get/all")
    public @ResponseBody List<Resource> getAllResources() {
        return resourcerepository.findAll();
    }

    @CrossOrigin(origins = "http://localhost:3000")
    @PostMapping(path="/get/borrow")
    public @ResponseBody int getAvailBorrow(@RequestBody JsonNode payload) {
        return itemRepository.countItems(payload.get("resource_id").asInt(), 1, true);
    }

    @CrossOrigin(origins = "http://localhost:3000")
    @GetMapping(path="/get/sale")
    public @ResponseBody int getAvailPurchase(@RequestBody JsonNode payload) {
        return itemRepository.countItems(payload.get("resource_id").asInt(),0, true);
    }

    @ResponseStatus(HttpStatus.FORBIDDEN)
    public class ForbiddenException extends RuntimeException {}

    @GetMapping(path="/confirm")
    public @ResponseBody String isAdmin (HttpServletRequest request) {
        User user = userRepository.findByUsername(request.getRemoteUser()).get();
        if(user != null) {
            if ((user.getRole()) == Role.valueOf("ADMIN")) {
                return "Success";
            }
        }
        throw new ForbiddenException();

    }

    /*
    public List<Item> getBorrowedItems(String username) throws ResourceNotFoundException {
        List<Item> borrowedItems = itemRepository.findByUsernameAndItemtype(username, ItemType.BORROW);
        if(borrowedItems.isEmpty()){
            throw new ResourceNotFoundException("You are not currently borrowing any items!");
        }
        return borrowedItems;
    }

    public List<Item> getPurchasedItems(String username) throws ResourceNotFoundException {
        List<Item> purchasedItems = itemRepository.findByUsernameAndItemtype(username, ItemType.SALE);
        if(purchasedItems.isEmpty()){
            throw new ResourceNotFoundException("You have not purchased any items!");
        }
        return purchasedItems;
    }
    */
}